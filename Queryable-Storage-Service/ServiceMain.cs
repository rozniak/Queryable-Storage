using Oddmatics.PowerUser.Windows.QueryableStorage.Configuration;
using Oddmatics.PowerUser.Windows.QueryableStorage.Database;
using Oddmatics.PowerUser.Windows.QueryableStorage.FileSystem;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;

namespace Oddmatics.PowerUser.Windows.QueryableStorage
{
    /// <summary>
    /// Represents the Windows Service for the Queryable Storage daemon.
    /// </summary>
    internal partial class ServiceMain : ServiceBase
    {
        /// <summary>
        /// The event log name for event entries generated by the "Queryable Storage" service.
        /// </summary>
        public const string QueryableStorageEventLog = "QueryableStorage";

        /// <summary>
        /// The event source name for event entries generated by the "Queryable Storage" service.
        /// </summary>
        public const string QueryableStorageEventSource = "querystor";


        /// <summary>
        /// The event log instance object for creating log entrys in Event Viewer.
        /// </summary>
        private static EventLog Log;


        /// <summary>
        /// The configurations for this service.
        /// </summary>
        private ServiceConfiguration Configuration;

        /// <summary>
        /// The active database connection.
        /// </summary>
        private IDatabaseConnection DatabaseConnection;

        /// <summary>
        /// The file system monitor for watching changes to files and folders.
        /// </summary>
        private FileSystemMonitor FileSystemMonitor;


        /// <summary>
        /// Initializes a new instance of the ServiceMain class.
        /// </summary>
        internal ServiceMain()
        {
            InitializeComponent();
        }


        /// <summary>
        /// Writes an entry into Event Viewer for this service.
        /// </summary>
        /// <param name="message">The message to write.</param>
        /// <param name="entryType">The type of entry to write.</param>
        internal void WriteLogEntry(string message, EventLogEntryType entryType)
        {
            Log.WriteEntry(message, entryType);
        }


        #region ServiceBase Method Implementations

        /// <summary>
        /// Executes when a Start command is sent to this service.
        /// </summary>
        /// <param name="args">Data passed by the start command.</param>
        protected override void OnStart(string[] args)
        {
            // Initialize the event viewer stuff
            //
            Log = new EventLog();

            if (!EventLog.SourceExists(QueryableStorageEventSource))
            {
                EventLog.CreateEventSource(
                    QueryableStorageEventSource,
                    QueryableStorageEventLog
                    );
            }

            Log.Source = QueryableStorageEventSource;
            Log.Log = QueryableStorageEventLog;

            // Load configurations
            //
            WriteLogEntry(
                "Reading configuration file.",
                EventLogEntryType.Information
                );

            Configuration = new ServiceConfiguration();

            // Link up database
            //
            WriteLogEntry(
                "Trying connection to database.",
                EventLogEntryType.Information
                );

            DatabaseConnection = DatabaseConnectionFactory.GetConnection(
                Configuration[ConfigurationKey.DatabaseConnectorName],
                Configuration[ConfigurationKey.DatabaseHostName],
                Convert.ToUInt16(Configuration[ConfigurationKey.DatabasePort]),
                Configuration[ConfigurationKey.DatabaseUsername],
                Configuration[ConfigurationKey.DatabasePassword]
                );

            // Set up the file system monitor
            //
            WriteLogEntry(
                "Spawning file system monitor.",
                EventLogEntryType.Information
                );

            FileSystemMonitor = new FileSystemMonitor(DatabaseConnection);
        }

        /// <summary>
        /// Executes when a Stop command is sent to this service.
        /// </summary>
        protected override void OnStop()
        {
            WriteLogEntry(
                "Stop command issued - disposing of objects now.",
                EventLogEntryType.Information
                );

            DatabaseConnection.Dispose();
            FileSystemMonitor.Dispose();
            Log.Dispose();

            WriteLogEntry(
                "Stop complete.",
                EventLogEntryType.Information
                );
        }

        #endregion
    }
}
